--------------------------------------------------------------------------------
Тестирование Spring scopes
--------------------------------------------------------------------------------
Варианты scope конфигураций:

View        @Route              - Без дополнительных аннотаций @(Spring)Component имеет prototype scope,
                                  т.е. создается каждый раз при переходе по ссылке

Editor      @SpringComponent    - по умолчанию Singleton scope (создается при старте приложения наряду с бинами сервисов)

Editor      @SpringComponent    - Singleton scope (создается при старте приложения наряду с бинами сервисов)
            @Scope("prototype")

--------------------------------------------------------------------------------
Наша рабочая конфигурация аннотаций!
(до перехода на Vaadin v21, где появился @RouteScope позволяющий более гибко настраивать отношения между подчиненными формами)
https://vaadin.com/docs/latest/flow/integrations/spring/scopes
--------------------------------------------------------------------------------
View        @Route              - Без дополнительных аннотаций имеет prototype scope (создается каждый раз при переходе по ссылке)

View (detail) @SpringComponent     - Для подчиненных (Detail) форм дополнительно указываем для внетрения в Master-форму
              @Scope("prototype")  - и prototype scope (View не могут создаваться вне контекста сессии (как singleton-ы))

Editor      @SpringComponent
            @Scope("prototype") - Prototype scope. Editor создается каждый раз для внедрения в соответствующее View


--------------------------------------------------------------------------------
Создание Detail-формы через наследование Master пока не работает нужным образом.
Переход по part-view приводит к созданию экземпляра наследника PartViewDetail,
вместо ожидаемого PartView (?????)
--------------------------------------------------------------------------------
From MainView:
    MenuItem mi10 = menuBar.addItem("Детали (Master)");
    mi10.addClickListener(e -> UI.getCurrent().navigate(PartView.class));

public class PartViewDetail extends PartView {
    public PartViewDetail(PartService service, PartViewEditor editor) {
        super(service, editor);
    }
}

@Route(value = "part-view", layout = MainView.class)
public class PartView extends BaseDictView<Part, PartService> {
    ...
}
--------------------------------------------------------------------------------

